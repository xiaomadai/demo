#端口
server.port=8081


#SpringApplication允许延迟初始化应用程序。启用延迟初始化后，将根据需要创建bean，而不是在应用程序启动期间创建bean。因此，启用延迟初始化可以减少应用程序启动所需的时间。在Web应用程序中，启用延迟初始化将导致许多与Web相关的Bean直到收到HTTP请求后才被初始化。
#
#延迟初始化的缺点是，它可能会延迟发现应用程序问题的时间。如果错误配置的Bean延迟初始化，则启动期间将不再发生故障，并且只有在初始化Bean时问题才会变得明显。还必须注意确保JVM有足够的内存来容纳所有应用程序的bean，而不仅仅是启动期间初始化的bean。由于这些原因，默认情况下不会启用延迟初始化，因此建议在启用延迟初始化之前先对JVM的堆大小进行微调。
#
#可以使用lazyInitializationon方法SpringApplicationBuilder或setLazyInitializationon 方法以编程方式启用延迟初始化SpringApplication。或者，可以使用spring.main.lazy-initialization以下示例中所示的属性来启用它：

#延迟初始化
#spring.main.lazy-initialization=true

#如果要在对应用程序的其余部分使用延迟初始化时禁用某些bean的延迟初始化，则可以使用@Lazy(false)批注将它们的延迟属性显式设置为false 。

# redis 配置
spring.redis.database=0
spring.redis.host=127.0.0.1
spring.redis.port=6379
spring.redis.password=1234567
# 连接超时时间 单位 ms（毫秒）
spring.redis.timeout=3000

# 连接池中的最大空闲连接，默认值也是8。
spring.redis.jedis.pool.max-active=8
#连接池中的最小空闲连接，默认值也是0。
spring.redis.jedis.pool.min-idle=0
# 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。
spring.redis.jedis.pool.max-idle=8
# 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException
spring.redis.jedis.pool.max-wait=-1